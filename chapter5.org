* Parsing in Practice

- While LL(1) parsers are commonly written by hand, LR(1) parsers are
  simply too cumbersome to do the same.
- Instead, we rely upon a *parser generator* to take a specification of
  a grammar and automatically produce the working code.
- In this chapter, we will look into *Bison*.

Using Bison, we will define an LALR grammar for algebraic expressions,
and then employ it to create three different varieties of programs:

- A *validator* reads the input program and then simply informs the user
  whether it is a valid sentence in the language specified by the
  grammar.
- An *interpreter* reads the input program and then actually executes
  the program to produce a result.
- A *translator* reads the input program, parses it into an abstract
  syntax tree, and then traverses the abstract syntax tree to produce
  an equivalent program in a different format.

* The Bison Parser Generator

- It is not practical to implement an LALR parser by hand, and so we
  rely on tools to automatically generate tables and code from a
  grammar specification.
- YACC (Yet Another Compiler Compiler) was a widely used parser
  generator in the Unix environment, recently supplanted by the GNU
  Bison parser which is generally compatible.
- Bison is designed to automatically invoke Flex as needed, so it is
  easy to combine the two into a complete program.

The overall structure of a Bison file is similar to that of Flex:

#+begin_src bison :exports both
%{
   (C PREAMBLE CODE)
%}
   (declarations)
%%
   (grammar rules)
%%
   (C postamble code)
#+end_src

- The second section can contain a variety of declarations specific to
  the Bison language. We will use the ~%token~ keyword to declare all of
  the terminals in our language.

The main body of the file contains a series of rules of the form:

#+begin_src bison :exports both
  expr : expr TOKEN_ADD expr
       | TOKEN_INT
       ;
#+end_src

- The above code indicats that the non terminal ~expr~ can produce the
  sentence ~expr TOKEN_ADD expr~ or single terminal ~TOKEN_INT~.
- White space is not significant, so itâ€™s ok to arrange the rules for
  clarity.
- Note that the usual naming convention is reversed: since upper case
  is customarily used for C constants, we use lower case to indicate
  non-terminals.
- The resulting code creates a single function ~yyparse()~ than
  returns an integer:
  - zero indicates a successful parse
  - one indicates a parse error
  - two indicates an internal problem such as memory exhaustion
- ~yyparse~ assumes that there exists a function ~yylex~ that returns
  integer token types. This can be written by hand or generated
  automatically by Flex.

#+begin_src sh :exports both
bison --defines=token.h --output=parser.c parser.bison
#+end_src

- The ~--output=parser.c~ option directs Bison to write its code into
  the file ~parser.c~ instead of the cryptic ~yy.tab.c~
- If your grammar has shift-reduce or reduce-reduce conflicts, Bison
  will happily output working code with some of the conflicting
  actions suppressed. Always check for conflicts before proceeding.

Filename: scanner.flex

#+begin_src c
{{#include code/c4/validator/scanner.flex}}
#+end_src

Filename: parser.bison

#+begin_src c
{{#include code/c4/validator/parser.bison}}
#+end_src

Filename: main.c

#+begin_src c
{{#include code/c4/validator/main.c}}
#+end_src

todo: insert pic (page 72)

#+begin_src c
expr : expr TOKEN_PLUS term { $$ = $1 + $3; }
#+end_src

- *$$* is the result
- *$n* is the n-th term in the syntax rule.

In our above example, ~$1~ refers to ~expr~ and ~$3~ refers to ~term~.

Now let's write the interpreter for the above grammar.

Filename: parser.bison

#+begin_src c
{{#include code/c4/interpreter/parser.bison:22:34}}
#+end_src

Filename: main.c

#+begin_src c
{{#include code/c4/interpreter/main.c}}
#+end_src

* Expression Trees

- In our previous implementation, we are computing results in the
  middle of parsing the input.
- The above approach has disadvantage: What if parse error happens
  later, our computation is wasted. It is generally more desirable to
  find all parse errors before execution.
- To fix this, we will add a new stage to the interpreter. Instead of
  computing values outright, we will construct a data structure known
  as the *abstract syntax tree* to represent the expression.
- Once the AST is created, we can traverse the tree to check, execute,
  and translate the program as needed.

Filename: expr.h

#+begin_src c
{{#include code/c4/tree/expr.h}}
#+end_src

Filename: expr.c

#+begin_src c
{{#include code/c4/tree/expr.c}}
#+end_src

Filename: parser.bison

#+begin_src c
{{#include code/c4/tree/parser.bison}}
#+end_src

Some notes about the above code:

- We explicitly define the *semantic type* by setting the macro
  *YYSTYPE* to ~struct expr*~. This causes Bison to use ~struct expr
  *~ as the internal type everywhere a semantic value such as $$ or $1
  is used. The final parser result must have the same semantic type,
  of course.
- The final parser result must have the same semantic type, of course.

todo: insert pic (page 79)

- Parentheses are not directly represented in the AST. Instead, they
  have the effect of ordering the nodes in the tree to achieve the
  desired evaluation order.

todo: insert pic (page 79)

Filename: main.c

#+begin_src c
{{#include code/c4/tree/main.c}}
#+end_src
